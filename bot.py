import json
import subprocess
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import FSInputFile, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio
from datetime import datetime
import os
from dotenv import load_dotenv

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ARTICLES_FILE = "articles.json"
IMAGES_DIR = "images"
ADMIN_IDS = [int(id) for id in os.getenv("ADMIN_IDS", "").split(",") if id]

os.makedirs(IMAGES_DIR, exist_ok=True)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

user_states = {}

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞–Ω–∏–º–∏
def load_articles():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å—Ç–∞—Ç—Ç—ñ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é ID"""
    try:
        with open(ARTICLES_FILE, "r", encoding="utf-8") as f:
            articles = json.load(f)
            # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –≤—Å—ñ ID - –ø—Ä–æ—Å—Ç—ñ —á–∏—Å–ª–∞
            if articles and not isinstance(articles[0]['id'], int):
                return regenerate_ids(articles)
            return articles
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def regenerate_ids(articles):
    """–ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î ID —É –ø—Ä–æ—Å—Ç–∏–π —á–∏—Å–ª–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç"""
    for i, article in enumerate(articles, 1):
        article['id'] = i
    save_articles(articles)
    return articles

def save_articles(articles):
    """–ó–±–µ—Ä—ñ–≥–∞—î —Å—Ç–∞—Ç—Ç—ñ —É —Ñ–∞–π–ª"""
    with open(ARTICLES_FILE, "w", encoding="utf-8") as f:
        json.dump(articles, f, ensure_ascii=False, indent=2)

def get_next_id():
    """–ì–µ–Ω–µ—Ä—É—î –Ω–∞—Å—Ç—É–ø–Ω–∏–π ID"""
    return len(load_articles()) + 1

async def update_website():
    """–û–Ω–æ–≤–ª—é—î —Å–∞–π—Ç —Ç–∞ GitHub Pages"""
    try:
        subprocess.run(["python3", "generate_site.py"], check=True)
        subprocess.run(["git", "add", "."], check=True)
        subprocess.run(["git", "commit", "-m", "–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–µ–π"], check=True)
        subprocess.run(["git", "push"], check=True)
        return True
    except subprocess.CalledProcessError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É: {e}")
        return False

def save_image(file_id: str, user_id: int) -> str:
    """–ó–±–µ—Ä—ñ–≥–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—Ç—ñ"""
    image_path = os.path.join(IMAGES_DIR, f"{user_id}_{file_id}.jpg")
    return image_path

def create_main_keyboard():
    """–°—Ç–≤–æ—Ä—é—î –æ—Å–Ω–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/add"), KeyboardButton(text="/list")],
            [KeyboardButton(text="/edit"), KeyboardButton(text="/delete")],
            [KeyboardButton(text="/cancel")]
        ],
        resize_keyboard=True
    )

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(CommandStart())
async def start(message: types.Message):
    """–û–±—Ä–æ–±–∫–∞ /start"""
    await message.answer(
        "üì∞ –í—ñ—Ç–∞—é –≤ –Ω–æ–≤–∏–Ω–Ω–æ–º—É –±–æ—Ç—ñ!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/add - –¥–æ–¥–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—é\n"
        "/list - –ø–µ—Ä–µ–≥–ª—è–¥ —Å—Ç–∞—Ç–µ–π\n"
        "/edit - —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è\n"
        "/delete - –≤–∏–¥–∞–ª–µ–Ω–Ω—è",
        reply_markup=create_main_keyboard()
    )

@dp.message(Command("cancel"))
async def cancel(message: types.Message):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥—ñ—ó"""
    user_id = message.from_user.id
    if user_id in user_states:
        user_states.pop(user_id)
        await message.answer("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=create_main_keyboard())
    else:
        await message.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—ñ–π –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")

@dp.message(Command("add"))
async def add_article_start(message: types.Message):
    """–ü–æ—á–∞—Ç–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—Ç—ñ"""
    user_states[message.from_user.id] = {
        "step": "waiting_photo",
        "new_id": get_next_id()
    }
    await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –¥–ª—è —Å—Ç–∞—Ç—Ç—ñ:")

@dp.message(Command("list"))
async def list_articles(message: types.Message):
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –∑ –∫–Ω–æ–ø–∫–∞–º–∏"""
    articles = load_articles()
    
    if not articles:
        await message.answer("–°—Ç–∞—Ç–µ–π –ø–æ–∫–∏ –Ω–µ–º–∞—î.", reply_markup=create_main_keyboard())
        return
    
    builder = InlineKeyboardBuilder()
    for article in articles:
        builder.button(
            text=f"{article['id']}. {article['title'][:20]}",
            callback_data=f"view_{article['id']}"
        )
    builder.adjust(2)
    
    await message.answer(
        "üìã –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(lambda c: c.data.startswith("view_"))
async def view_article(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ–≥–ª—è–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å—Ç–∞—Ç—Ç—ñ"""
    article_id = int(callback.data.split("_")[1])
    articles = load_articles()
    article = next((a for a in articles if a['id'] == article_id), None)
    
    if not article:
        await callback.answer("–°—Ç–∞—Ç—Ç—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        return
    
    date = datetime.strptime(article['date'], "%Y-%m-%d").strftime("%d.%m.%Y")
    text = f"üìñ <b>{article['title']}</b>\nüìÖ {date}\n\n{article['content']}"
    
    if 'image' in article and os.path.exists(article['image']):
        await callback.message.answer_photo(
            FSInputFile(article['image']),
            caption=text
        )
    else:
        await callback.message.answer(text)
    
    await callback.answer()

@dp.message(Command("edit"))
async def edit_articles_list(message: types.Message):
    """–°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤")
        return
    
    articles = load_articles()
    
    if not articles:
        await message.answer("–ù–µ–º–∞—î —Å—Ç–∞—Ç–µ–π –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è")
        return
    
    builder = InlineKeyboardBuilder()
    for article in articles:
        builder.button(
            text=f"‚úèÔ∏è {article['id']}. {article['title'][:15]}",
            callback_data=f"edit_{article['id']}"
        )
    builder.adjust(1)
    
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—Ç—é –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(lambda c: c.data.startswith("edit_"))
async def edit_article_start(callback: types.CallbackQuery):
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—Ç—ñ"""
    article_id = int(callback.data.split("_")[1])
    articles = load_articles()
    article = next((a for a in articles if a['id'] == article_id), None)
    
    if not article:
        await callback.answer("–°—Ç–∞—Ç—Ç—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        return
    
    user_states[callback.from_user.id] = {
        "step": "editing",
        "article_id": article_id,
        "original_title": article['title'],
        "original_image": article.get('image', '')
    }
    
    await callback.message.answer(
        f"–†–µ–¥–∞–≥—É—î–º–æ: <b>{article['title']}</b>\n\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å:\n1. –ù–æ–≤–µ —Ñ–æ—Ç–æ ('–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏' —â–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ)\n"
        "2. –ù–æ–≤–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫\n3. –ù–æ–≤–∏–π —Ç–µ–∫—Å—Ç"
    )
    await callback.answer()

@dp.message(Command("delete"))
async def delete_article(message: types.Message, command: CommandObject):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—Ç—ñ –∑–∞ ID"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤")
        return
    
    if not command.args:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—Ç—ñ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /delete 3")
        return
    
    try:
        article_id = int(command.args)
        articles = load_articles()
        article = next((a for a in articles if a['id'] == article_id), None)
        
        if not article:
            await message.answer("–°—Ç–∞—Ç—Ç—è –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ç—Ç—é
        articles = [a for a in articles if a['id'] != article_id]
        save_articles(articles)
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        if 'image' in article and os.path.exists(article['image']):
            os.remove(article['image'])
        
        if await update_website():
            await message.answer(f"‚úÖ –°—Ç–∞—Ç—Ç—é '{article['title']}' –≤–∏–¥–∞–ª–µ–Ω–æ!")
        else:
            await message.answer("–°—Ç–∞—Ç—Ç—é –≤–∏–¥–∞–ª–µ–Ω–æ, –∞–ª–µ –ø–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É")
            
    except ValueError:
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—Ç—ñ")

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message()
async def handle_messages(message: types.Message):
    """–û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    user_id = message.from_user.id
    state = user_states.get(user_id)
    
    if not state:
        await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –æ–¥–Ω—É –∑ –∫–æ–º–∞–Ω–¥", reply_markup=create_main_keyboard())
        return
    
    if state["step"] == "waiting_photo":
        if message.photo:
            file_id = message.photo[-1].file_id
            image_path = save_image(file_id, user_id)
            file = await bot.get_file(file_id)
            await bot.download_file(file.file_path, image_path)
            
            state["image_path"] = image_path
            state["step"] = "waiting_title"
            await message.answer("–§–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫:")
        else:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ")
    
    elif state["step"] == "waiting_title":
        if len(message.text) > 100:
            await message.answer("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª—ñ–≤)")
            return
        
        state["title"] = message.text
        state["step"] = "waiting_content"
        await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—Ç—ñ:")
    
    elif state["step"] == "waiting_content":
        if len(message.text) > 4000:
            await message.answer("–¢–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (–º–∞–∫—Å. 4000 —Å–∏–º–≤–æ–ª—ñ–≤)")
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Å—Ç–∞—Ç—Ç—é
        new_article = {
            "id": state["new_id"],
            "title": state["title"],
            "content": message.text,
            "image": state["image_path"],
            "date": datetime.now().strftime("%Y-%m-%d"),
            "author": message.from_user.full_name
        }
        
        # –î–æ–¥–∞—î–º–æ –¥–æ —Å–ø–∏—Å–∫—É
        articles = load_articles()
        articles.append(new_article)
        save_articles(articles)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å–∞–π—Ç
        if await update_website():
            await message.answer(
                f"‚úÖ –°—Ç–∞—Ç—Ç—é –¥–æ–¥–∞–Ω–æ! ID: {new_article['id']}",
                reply_markup=create_main_keyboard()
            )
        else:
            await message.answer("–°—Ç–∞—Ç—Ç—é –¥–æ–¥–∞–Ω–æ, –∞–ª–µ –ø–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É")
        
        user_states.pop(user_id)
    
    elif state["step"] == "editing":
        if "edit_step" not in state:
            # –ü–µ—Ä—à–∏–π –∫—Ä–æ–∫ - —Ñ–æ—Ç–æ
            if message.text and message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
                state["edit_step"] = "title"
                await message.answer("–§–æ—Ç–æ –∑–∞–ª–∏—à–µ–Ω–æ. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:")
            elif message.photo:
                file_id = message.photo[-1].file_id
                image_path = save_image(file_id, user_id)
                file = await bot.get_file(file_id)
                await bot.download_file(file.file_path, image_path)
                
                # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ —Ñ–æ—Ç–æ
                if state["original_image"] and os.path.exists(state["original_image"]):
                    os.remove(state["original_image"])
                
                state["new_image"] = image_path
                state["edit_step"] = "title"
                await message.answer("–ù–æ–≤–µ —Ñ–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫:")
            else:
                await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'")
        
        elif state["edit_step"] == "title":
            if len(message.text) > 100:
                await message.answer("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª—ñ–≤)")
                return
            
            state["new_title"] = message.text
            state["edit_step"] = "content"
            await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç:")
        
        elif state["edit_step"] == "content":
            if len(message.text) > 4000:
                await message.answer("–¢–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (–º–∞–∫—Å. 4000 —Å–∏–º–≤–æ–ª—ñ–≤)")
                return
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—Ç—é
            articles = load_articles()
            for article in articles:
                if article["id"] == state["article_id"]:
                    if "new_image" in state:
                        article["image"] = state["new_image"]
                    if "new_title" in state:
                        article["title"] = state["new_title"]
                    article["content"] = message.text
                    article["date"] = datetime.now().strftime("%Y-%m-%d")
                    break
            
            save_articles(articles)
            
            if await update_website():
                await message.answer(
                    f"‚úÖ –°—Ç–∞—Ç—Ç—é –æ–Ω–æ–≤–ª–µ–Ω–æ!",
                    reply_markup=create_main_keyboard()
                )
            else:
                await message.answer("–°—Ç–∞—Ç—Ç—é –æ–Ω–æ–≤–ª–µ–Ω–æ, –∞–ª–µ –ø–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É")
            
            user_states.pop(user_id)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())