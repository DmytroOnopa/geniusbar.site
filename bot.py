import json
import subprocess
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.utils import executor
import asyncio
from datetime import datetime
import os

BOT_TOKEN = os.getenv("BOT_TOKEN")
ARTICLES_FILE = "articles.json"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

user_states = {}

@dp.message(CommandStart())
async def start(message: types.Message):
    user_states[message.from_user.id] = {"step": "title"}
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –Ω–æ–≤–æ—ó —Å—Ç–∞—Ç—Ç—ñ –∞–±–æ /list –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —ñ—Å–Ω—É—é—á–∏—Ö.")

@dp.message(Command("list"))
async def list_articles(message: types.Message):
    try:
        with open(ARTICLES_FILE, "r", encoding="utf-8") as f:
            articles = json.load(f)
    except FileNotFoundError:
        articles = []

    if not articles:
        await message.answer("–°—Ç–∞—Ç–µ–π –ø–æ–∫–∏ –Ω–µ–º–∞—î.")
        return

    response = "üì∞ –ü–æ—Ç–æ—á–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ:\n\n"
    for article in sorted(articles, key=lambda x: x.get("date", ""), reverse=True):
        response += f"{article['date']} ‚Äî {article['title']}\n"

    await message.answer(response)

@dp.message()
async def collect_article(message: types.Message):
    user_id = message.from_user.id
    state = user_states.get(user_id)

    if not state:
        await message.answer("–ù–∞–¥—ñ—à–ª–∏ /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—Ç—ñ.")
        return

    if state["step"] == "title":
        state["title"] = message.text
        state["step"] = "content"
        await message.answer("–î–æ–±—Ä–µ! –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—Ç—ñ:")

    elif state["step"] == "content":
        state["content"] = message.text
        state["step"] = "done"

        new_article = {
            "title": state["title"],
            "content": state["content"],
            "date": datetime.now().strftime("%Y-%m-%d")
        }

        try:
            with open(ARTICLES_FILE, "r", encoding="utf-8") as f:
                articles = json.load(f)
        except FileNotFoundError:
            articles = []

        articles.append(new_article)

        with open(ARTICLES_FILE, "w", encoding="utf-8") as f:
            json.dump(articles, f, ensure_ascii=False, indent=2)

        # –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–∞–π—Ç—É
        subprocess.run(["python3", "generate_site.py"], check=True)

        # Git commit + push
        subprocess.run(["git", "add", "index.html", "articles.json"], check=True)
        subprocess.run(["git", "commit", "-m", f"–î–æ–¥–∞–Ω–æ —Å—Ç–∞—Ç—Ç—é: {state['title']}"], check=True)
        subprocess.run(["git", "push"], check=True)

        await message.answer("‚úÖ –°—Ç–∞—Ç—Ç—é –¥–æ–¥–∞–Ω–æ, —Å–∞–π—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ —Ç–∞ –∑–∞–ø—É—à–µ–Ω–æ –¥–æ GitHub Pages!")
        user_states.pop(user_id)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
