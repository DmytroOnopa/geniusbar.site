import json
import subprocess
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import FSInputFile, InputMediaPhoto
import asyncio
from datetime import datetime
import os
from dotenv import load_dotenv
import shutil

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ARTICLES_FILE = "articles.json"
IMAGES_DIR = "images"
ADMIN_IDS = [int(id) for id in os.getenv("ADMIN_IDS", "").split(",") if id]

# –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
os.makedirs(IMAGES_DIR, exist_ok=True)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_states = {}

def load_articles():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–µ–π –∑ —Ñ–∞–π–ª—É –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
    try:
        with open(ARTICLES_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def save_articles(articles):
    """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–µ–π —É —Ñ–∞–π–ª"""
    with open(ARTICLES_FILE, "w", encoding="utf-8") as f:
        json.dump(articles, f, ensure_ascii=False, indent=2)

async def update_website():
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É —Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è –Ω–∞ GitHub Pages"""
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–∞–π—Ç—É
        subprocess.run(["python3", "generate_site.py"], check=True)
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
        subprocess.run(["git", "add", "index.html", "articles.json", IMAGES_DIR], check=True)
        subprocess.run(["git", "commit", "-m", "–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–µ–π"], check=True)
        subprocess.run(["git", "push"], check=True)
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å–∞–π—Ç—É: {e}")
        return False

def save_image(file_id: str, user_id: int) -> str:
    """–ó–±–µ—Ä—ñ–≥–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —à–ª—è—Ö –¥–æ –Ω—å–æ–≥–æ"""
    image_path = os.path.join(IMAGES_DIR, f"{user_id}_{file_id}.jpg")
    return image_path

@dp.message(CommandStart())
async def start(message: types.Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
    await message.answer(
        "üëã –í—ñ—Ç–∞—é –≤ –Ω–æ–≤–∏–Ω–Ω–æ–º—É –±–æ—Ç—ñ!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/add - –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤—É —Å—Ç–∞—Ç—Ç—é (—Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç)\n"
        "/list - –ø–µ—Ä–µ–≥–ª—è–¥ —É—Å—ñ—Ö —Å—Ç–∞—Ç–µ–π\n"
        "/edit - —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—é\n"
        "/cancel - —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥—ñ—é"
    )

@dp.message(Command("cancel"))
async def cancel(message: types.Message):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥—ñ—ó"""
    user_id = message.from_user.id
    if user_id in user_states:
        user_states.pop(user_id)
        await message.answer("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    else:
        await message.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—ñ–π –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")

@dp.message(Command("add"))
async def add_article_start(message: types.Message):
    """–ü–æ—á–∞—Ç–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—Ç—ñ"""
    user_states[message.from_user.id] = {"step": "waiting_photo"}
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –¥–ª—è —Å—Ç–∞—Ç—Ç—ñ:")

@dp.message(Command("list"))
async def list_articles(message: types.Message):
    """–í–∏–≤–µ–¥–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Å—Ç–∞—Ç–µ–π"""
    articles = load_articles()

    if not articles:
        await message.answer("–°—Ç–∞—Ç–µ–π –ø–æ–∫–∏ –Ω–µ–º–∞—î.")
        return

    response = "üì∞ –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π:\n\n"
    for idx, article in enumerate(sorted(articles, key=lambda x: x.get("date", ""), reverse=True), 1):
        date = datetime.strptime(article['date'], "%Y-%m-%d").strftime("%d.%m.%Y")
        response += f"{idx}. {date} - {article['title']}\n"

    await message.answer(response)

@dp.message(Command("edit"))
async def edit_article_start(message: types.Message, command: CommandObject):
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—Ç—ñ"""
    articles = load_articles()
    
    if not command.args:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—Ç—ñ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /edit 1")
        return
    
    try:
        article_num = int(command.args)
        if article_num < 1 or article_num > len(articles):
            raise ValueError
    except ValueError:
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—Ç—ñ.")
        return
    
    article = sorted(articles, key=lambda x: x.get("date", ""), reverse=True)[article_num - 1]
    user_states[message.from_user.id] = {
        "step": "editing",
        "article_id": article['id'],
        "original_title": article['title']
    }
    
    await message.answer(
        f"–†–µ–¥–∞–≥—É—î–º–æ —Å—Ç–∞—Ç—Ç—é: {article['title']}\n\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–µ —Ñ–æ—Ç–æ (–∞–±–æ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏' —â–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ),\n"
        "–ø–æ—Ç—ñ–º –Ω–æ–≤—É –Ω–∞–∑–≤—É —Ç–∞ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç."
    )

@dp.message()
async def handle_messages(message: types.Message):
    """–û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    user_id = message.from_user.id
    state = user_states.get(user_id)
    
    if not state:
        await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –æ–¥–Ω—É –∑ –∫–æ–º–∞–Ω–¥: /start, /add, /list, /edit")
        return
    
    if state["step"] == "waiting_photo":
        if message.photo:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–æ—Ç–æ
            file_id = message.photo[-1].file_id
            image_path = save_image(file_id, user_id)
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–æ—Ç–æ
            file = await bot.get_file(file_id)
            await bot.download_file(file.file_path, image_path)
            
            state["image_path"] = image_path
            state["step"] = "waiting_title"
            await message.answer("–§–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—Ç—ñ:")
        else:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –¥–ª—è —Å—Ç–∞—Ç—Ç—ñ.")
    
    elif state["step"] == "waiting_title":
        if len(message.text) > 100:
            await message.answer("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª—ñ–≤.")
            return
        
        state["title"] = message.text
        state["step"] = "waiting_content"
        await message.answer("–ß—É–¥–æ–≤–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—Ç—ñ:")
    
    elif state["step"] == "waiting_content":
        if len(message.text) > 4000:
            await message.answer("–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—Ç—ñ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª—ñ–≤.")
            return
        
        state["content"] = message.text
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Å—Ç–∞—Ç—Ç—é
        new_article = {
            "id": str(datetime.now().timestamp()),
            "title": state["title"],
            "content": state["content"],
            "image": state["image_path"],
            "date": datetime.now().strftime("%Y-%m-%d"),
            "author": message.from_user.full_name
        }
        
        # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç—Ç—é
        articles = load_articles()
        articles.append(new_article)
        save_articles(articles)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å–∞–π—Ç
        success = await update_website()
        
        if success:
            await message.answer_photo(
                photo=FSInputFile(state["image_path"]),
                caption=f"‚úÖ –°—Ç–∞—Ç—Ç—é –¥–æ–¥–∞–Ω–æ!\n\n<b>{state['title']}</b>\n\n{state['content']}"
            )
        else:
            await message.answer("–°—Ç–∞—Ç—Ç—é –¥–æ–¥–∞–Ω–æ, –∞–ª–µ –≤–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º —Å–∞–π—Ç—É.")
        
        user_states.pop(user_id)
    
    elif state["step"] == "editing":
        if "edit_step" not in state:
            # –ü–µ—Ä—à–∏–π –∫—Ä–æ–∫ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è - —Ñ–æ—Ç–æ
            if message.text and message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
                state["edit_step"] = "title"
                await message.answer("–ó–∞–ª–∏—à–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–µ —Ñ–æ—Ç–æ. –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É:")
            elif message.photo:
                file_id = message.photo[-1].file_id
                image_path = save_image(file_id, user_id)
                
                file = await bot.get_file(file_id)
                await bot.download_file(file.file_path, image_path)
                
                state["new_image"] = image_path
                state["edit_step"] = "title"
                await message.answer("–ù–æ–≤–µ —Ñ–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É:")
            else:
                await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–µ —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'")
        
        elif state["edit_step"] == "title":
            if len(message.text) > 100:
                await message.answer("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª—ñ–≤.")
                return
            
            state["new_title"] = message.text
            state["edit_step"] = "content"
            await message.answer("–ì–∞—Ä–Ω–∞ –Ω–∞–∑–≤–∞! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç:")
        
        elif state["edit_step"] == "content":
            if len(message.text) > 4000:
                await message.answer("–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—Ç—ñ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª—ñ–≤.")
                return
            
            state["new_content"] = message.text
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—Ç—é
            articles = load_articles()
            for article in articles:
                if article["id"] == state["article_id"]:
                    if "new_image" in state:
                        article["image"] = state["new_image"]
                    if "new_title" in state:
                        article["title"] = state["new_title"]
                    if "new_content" in state:
                        article["content"] = state["new_content"]
                    article["date"] = datetime.now().strftime("%Y-%m-%d")
                    break
            
            save_articles(articles)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å–∞–π—Ç
            success = await update_website()
            
            if success:
                await message.answer(
                    f"‚úÖ –°—Ç–∞—Ç—Ç—é '{state.get('new_title', state['original_title'])} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!"
                )
            else:
                await message.answer("–°—Ç–∞—Ç—Ç—é –æ–Ω–æ–≤–ª–µ–Ω–æ, –∞–ª–µ –≤–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º —Å–∞–π—Ç—É.")
            
            user_states.pop(user_id)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())